// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StripePaymentProcessor.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250525092354_FullNameNullable")]
    partial class FullNameNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbd8ff33-2fc8-4964-948c-84e23ba562c4"),
                            Description = "A timeless 18K gold ring with a minimalist design.",
                            ImageUrl = "https://pristinediam.com/cdn/shop/files/205-JBDHR023_d2c71aeb-7026-49e6-8a02-56ea425ea375.jpg?v=1713180188",
                            IsDeleted = false,
                            Material = "Gold",
                            Name = "Golden Elegance Ring",
                            Price = 249.99m,
                            Type = "Ring"
                        },
                        new
                        {
                            Id = new Guid("927dccbc-fa5a-4e1f-a4c2-471cd77f1895"),
                            Description = "Elegant silver bracelet with intricate patterns.",
                            ImageUrl = "https://bycharlotte.com.au/cdn/shop/files/b111g18-silver-path-to-harmony-bracelet-silver-1_ae8ef8c3-0653-4b5f-beb1-a120ee267f11.jpg?v=1701840881",
                            IsDeleted = false,
                            Material = "Silver",
                            Name = "Silver Harmony Bracelet",
                            Price = 99.50m,
                            Type = "Bracelet"
                        },
                        new
                        {
                            Id = new Guid("ba798b51-30df-4017-9a07-f4cea409d79e"),
                            Description = "Luxurious platinum necklace, perfect for formal occasions.",
                            ImageUrl = "https://prod-images.fashionphile.com/large/f251f548e9fece17727ed01b2a3f25ca/e817ed6237c197aa468a9dd8552aa0e0.jpg",
                            IsDeleted = false,
                            Material = "Platinum",
                            Name = "Platinum Grace Necklace",
                            Price = 399.00m,
                            Type = "Necklace"
                        },
                        new
                        {
                            Id = new Guid("be8c019f-3781-4a65-9239-f0c37f2b6fc6"),
                            Description = "Stylish diamond earrings with sparkling clarity.",
                            ImageUrl = "https://www.alighieri.com/cdn/shop/products/17_SALT_PEPPEREARRINGS_3.png?crop=center&height=1275&v=1676895899&width=1080",
                            IsDeleted = false,
                            Material = "Diamond",
                            Name = "Diamond Spark Earrings",
                            Price = 120.75m,
                            Type = "Earring"
                        },
                        new
                        {
                            Id = new Guid("942c2a28-0292-4f20-9378-47dd300407e7"),
                            Description = "18K gold pendant shaped like a delicate leaf.",
                            ImageUrl = "https://res.cloudinary.com/lbh-prod/image/fetch/w_1000,f_auto,q_auto/https://www.ross-simons.com/on/demandware.static/-/Sites-lbh-master/default/dw28ac017c/images/jewelry-gold-necklaces/953253.jpg",
                            IsDeleted = false,
                            Material = "Gold",
                            Name = "Golden Leaf Pendant",
                            Price = 149.95m,
                            Type = "Brooch"
                        },
                        new
                        {
                            Id = new Guid("ce18312b-e8d3-4e1c-9193-6ce0e55314d5"),
                            Description = "Sleek silver drop earrings for everyday elegance.",
                            ImageUrl = "https://www.jonrichard.com/images/simply-silver-sterling-silver-925-cubic-zirconia-wrapped-in-love-drop-earrings-p46628-58939_zoom.jpg",
                            IsDeleted = false,
                            Material = "Silver",
                            Name = "Silver Drop Earrings",
                            Price = 59.90m,
                            Type = "Earring"
                        },
                        new
                        {
                            Id = new Guid("6ff5cfd8-3726-49eb-ad36-f1344c91046e"),
                            Description = "Platinum brooch with a geometric circle design.",
                            ImageUrl = "https://dsfantiquejewelry.com/cdn/shop/files/J.E.Caldwell_Co.DiamondBrooch.jpg?v=1739836183&width=2048",
                            IsDeleted = false,
                            Material = "Platinum",
                            Name = "Platinum Circle Brooch",
                            Price = 210.00m,
                            Type = "Brooch"
                        },
                        new
                        {
                            Id = new Guid("0430a33a-6fb2-48ef-9c38-7c731896da6e"),
                            Description = "Delicate diamond bracelet featuring an infinity symbol.",
                            ImageUrl = "https://www.jared.com/productimages/processed/V-211665803_0_800.jpg?pristine=true",
                            IsDeleted = false,
                            Material = "Diamond",
                            Name = "Diamond Infinity Bracelet",
                            Price = 130.45m,
                            Type = "Bracelet"
                        },
                        new
                        {
                            Id = new Guid("93d99b4f-383f-415e-9967-7804ca9ca917"),
                            Description = "Charming heart-shaped necklace in 14K gold.",
                            ImageUrl = "https://danielladraper.com/cdn/shop/files/babyheartnecklacegold2_1.jpg?v=1705493046&width=3200",
                            IsDeleted = false,
                            Material = "Gold",
                            Name = "Gold Heart Necklace",
                            Price = 185.75m,
                            Type = "Necklace"
                        },
                        new
                        {
                            Id = new Guid("0f956796-9692-4925-b10b-2da9502c7d89"),
                            Description = "Simple silver brooch perfect for any outfit.",
                            ImageUrl = "https://efsterling.com/cdn/shop/products/by2-st.jpg?v=1525401307",
                            IsDeleted = false,
                            Material = "Silver",
                            Name = "Silver Charm Brooch",
                            Price = 75.00m,
                            Type = "Brooch"
                        },
                        new
                        {
                            Id = new Guid("8a31b3b7-5e05-4b88-b712-0677546fb130"),
                            Description = "Classic platinum band ring with polished surface.",
                            ImageUrl = "https://www.auronia.co.uk/media/catalog/product/V/R/VR201-0.05-PT-950-default.jpg",
                            IsDeleted = false,
                            Material = "Platinum",
                            Name = "Platinum Band Ring",
                            Price = 325.00m,
                            Type = "Ring"
                        },
                        new
                        {
                            Id = new Guid("192ee277-3634-4f67-8f75-77b3221657a7"),
                            Description = "Diamond necklace with a teardrop-shaped pendant.",
                            ImageUrl = "https://elementbespokejewellery.com/cdn/shop/products/ElementBespokeJewelleryBirmingham_diamondnecklace_1_2048x2048.jpg?v=1611150359",
                            IsDeleted = false,
                            Material = "Diamond",
                            Name = "Diamond Teardrop Necklace",
                            Price = 145.60m,
                            Type = "Necklace"
                        },
                        new
                        {
                            Id = new Guid("b52b8031-29f0-4097-a295-4e02f13fbd53"),
                            Description = "Elegant pearl drop earrings with a classic style.",
                            ImageUrl = "https://hamiltonandinches.com/media/catalog/product/cache/9181a0a2f38e4d88d07b3ff1853f6e95/0/0/00-25177.jpg",
                            IsDeleted = false,
                            Material = "Pearl",
                            Name = "Pearl Drop Earrings",
                            Price = 89.20m,
                            Type = "Earring"
                        },
                        new
                        {
                            Id = new Guid("655350e5-abe4-4171-b0d0-f2cbf8867e24"),
                            Description = "Graceful pearl bracelet with small charms.",
                            ImageUrl = "https://www.bibaandrose.co.uk/wp-content/uploads/2020/03/charm-br.jpg",
                            IsDeleted = false,
                            Material = "Pearl",
                            Name = "Pearl Charm Bracelet",
                            Price = 112.30m,
                            Type = "Bracelet"
                        },
                        new
                        {
                            Id = new Guid("609b1dd8-056c-4ee9-96bd-097b40edae99"),
                            Description = "Elegant gold ring featuring a solitaire design.",
                            ImageUrl = "https://www.jared.com/productimages/processed/V-161321702_1_800.jpg?pristine=true",
                            IsDeleted = false,
                            Material = "Gold",
                            Name = "Gold Solitaire Ring",
                            Price = 275.99m,
                            Type = "Ring"
                        });
                });

            modelBuilder.Entity("SPP.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SPP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SPP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SPP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("SPP.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderItem", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SPP.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
