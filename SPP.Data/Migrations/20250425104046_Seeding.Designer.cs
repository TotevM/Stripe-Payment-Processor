// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StripePaymentProcessor.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250425104046_Seeding")]
    partial class Seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c611853-5bea-4269-93be-073b67b83dd0"),
                            Description = "A timeless 18K gold ring with a minimalist design.",
                            ImageUrl = "https://example.com/images/golden-ring.jpg",
                            Material = 0,
                            Name = "Golden Elegance Ring",
                            Price = 249.99m,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("6ec6da8b-dba6-469c-8c31-f392869e0df7"),
                            Description = "Elegant silver bracelet with intricate patterns.",
                            ImageUrl = "https://example.com/images/silver-bracelet.jpg",
                            Material = 1,
                            Name = "Silver Harmony Bracelet",
                            Price = 99.50m,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("87bd64c0-cf78-42a0-aaa9-73a3967c3b5b"),
                            Description = "Luxurious platinum necklace, perfect for formal occasions.",
                            ImageUrl = "https://example.com/images/platinum-necklace.jpg",
                            Material = 2,
                            Name = "Platinum Grace Necklace",
                            Price = 399.00m,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("5068ae55-01dd-4ce0-80c3-278252d00067"),
                            Description = "Stylish rose gold earrings with sparkling stones.",
                            ImageUrl = "https://example.com/images/rose-earrings.jpg",
                            Material = 3,
                            Name = "Rose Gold Spark Earrings",
                            Price = 120.75m,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("aa40809c-2f75-4f72-a987-36f8c71de270"),
                            Description = "Modern titanium ring designed for durability and style.",
                            ImageUrl = "https://example.com/images/titanium-ring.jpg",
                            Material = 4,
                            Name = "Titanium Edge Ring",
                            Price = 89.99m,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("3f167925-63b6-4b83-832b-f2051f08487e"),
                            Description = "18K gold pendant shaped like a delicate leaf.",
                            ImageUrl = "https://example.com/images/golden-pendant.jpg",
                            Material = 0,
                            Name = "Golden Leaf Pendant",
                            Price = 149.95m,
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("60a1c80f-2fbf-4825-ab6b-10f531975c6e"),
                            Description = "Sleek silver drop earrings for everyday elegance.",
                            ImageUrl = "https://example.com/images/silver-earrings.jpg",
                            Material = 1,
                            Name = "Silver Drop Earrings",
                            Price = 59.90m,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("51a58c89-25b1-4d9f-91a6-425590f12d44"),
                            Description = "Platinum pendant with a geometric circle design.",
                            ImageUrl = "https://example.com/images/platinum-pendant.jpg",
                            Material = 2,
                            Name = "Platinum Circle Pendant",
                            Price = 210.00m,
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("beba5cec-a336-4b19-9818-5de772525a9c"),
                            Description = "Delicate rose gold bracelet featuring an infinity symbol.",
                            ImageUrl = "https://example.com/images/rose-bracelet.jpg",
                            Material = 3,
                            Name = "Rose Gold Infinity Bracelet",
                            Price = 130.45m,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("f3c4138e-def5-4d93-8020-d9da93f875e8"),
                            Description = "Contemporary titanium cuff bracelet with matte finish.",
                            ImageUrl = "https://example.com/images/titanium-bracelet.jpg",
                            Material = 4,
                            Name = "Titanium Cuff Bracelet",
                            Price = 110.00m,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("553d90cc-78c8-454e-85aa-821ed9f9df02"),
                            Description = "Charming heart-shaped necklace in 14K gold.",
                            ImageUrl = "https://example.com/images/gold-heart-necklace.jpg",
                            Material = 0,
                            Name = "Gold Heart Necklace",
                            Price = 185.75m,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("e8ec0854-b2bb-4ed3-890d-93d52bc186c9"),
                            Description = "Simple silver pendant perfect for any chain.",
                            ImageUrl = "https://example.com/images/silver-charm.jpg",
                            Material = 1,
                            Name = "Silver Charm Pendant",
                            Price = 75.00m,
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("ac4b5783-865e-44da-8f87-51343e6367d1"),
                            Description = "Classic platinum band ring with polished surface.",
                            ImageUrl = "https://example.com/images/platinum-band.jpg",
                            Material = 2,
                            Name = "Platinum Band Ring",
                            Price = 325.00m,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("d5e99643-16bb-4a5f-9dec-65a364cda951"),
                            Description = "Rose gold necklace with teardrop-shaped pendant.",
                            ImageUrl = "https://example.com/images/rose-necklace.jpg",
                            Material = 3,
                            Name = "Rose Gold Teardrop Necklace",
                            Price = 145.60m,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("d771781d-79f0-48af-85f4-ff58e51d5c33"),
                            Description = "Minimalist titanium stud earrings for daily wear.",
                            ImageUrl = "https://example.com/images/titanium-earrings.jpg",
                            Material = 4,
                            Name = "Titanium Stud Earrings",
                            Price = 70.20m,
                            Type = 3
                        });
                });

            modelBuilder.Entity("SPP.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SPP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SPP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SPP.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("SPP.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderItem", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SPP.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
